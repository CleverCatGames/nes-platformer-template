MEMORY {

    INES:		start = $0000, size = $0010, fill = yes;
    # first 8 bytes reserved for temporary variables
    ZP: 		start = $0000, size = $0100, type = rw, define = yes;

    RAM:		start = $0300, size = $0500, define = yes;

    # 8 16K ROM BANKS
    BANK1:  start = $8000, size = $4000, fill=yes, bank=0;
    BANK2:  start = $8000, size = $4000, fill=yes, bank=1;
    BANK3:  start = $8000, size = $4000, fill=yes, bank=2;
    BANK4:  start = $8000, size = $4000, fill=yes, bank=3;
    BANK5:  start = $8000, size = $4000, fill=yes, bank=4;
    BANK6:  start = $8000, size = $4000, fill=yes, bank=5;
    BANK7:  start = $8000, size = $4000, fill=yes, bank=6;
    FIXED:  start = $C000, size = $4000, fill=yes;
}

SEGMENTS {

    HEADER:   load = INES,    type = ro;
    STARTUP:  load = FIXED,   type = ro;
    LOWCODE:  load = FIXED,   type = ro, optional = yes;
    DPCM:     load = FIXED,   type = ro, optional = yes;
    INIT:     load = FIXED,   type = ro, optional = yes;
    CODE:     load = FIXED,   type = ro, align = $100;
    RODATA:   load = FIXED,   type = ro;
    ONCE:     load = FIXED,   type = ro, optional = yes;

    EXAMPLE:  load = BANK1,   type = ro, optional = yes;

    MUSIC:    load = BANK5,   type = ro, optional = yes;

    GRAPHICS: load = BANK6,   type = ro, optional = yes;

    OBJECTS:  load = BANK7,   type = ro, optional = yes;

    BSS:      load = RAM,     type = bss;
    HEAP:     load = RAM,     type = bss, optional = yes;
    ZEROPAGE: load = ZP,      type = zp;
    VECTORS:  load = FIXED,   type = ro, start=$FFFA;
}

SYMBOLS {
    __STACKSIZE__ : type = weak, value = $0500;      # 5 pages stack

    NES_MAPPER    : type = weak, value = 2;  # mapper number (2 = UNROM)
    NES_PRG_BANKS : type = weak, value = 8;  # number of 16K PRG banks
    NES_CHR_BANKS : type = weak, value = 0;  # number of 8K CHR banks
    NES_SAVE_RAM  : type = weak, value = 0;  # if mapper has save ram
    NES_MIRRORING : type = weak, value = 1;  # 0 horizontal, 1 vertical, 8 four screen
}
